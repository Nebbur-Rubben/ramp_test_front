{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nebbor\\\\OneDrive\\\\\\u684C\\u9762\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    hasMore,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const transactions = useMemo(() => allTransactions, [allTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setAllTransactions(paginatedTransactions.data);\n    }\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n\n    if (transactionsByEmployee) {\n      setAllTransactions(transactionsByEmployee);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]);\n  const loadMoreTransactions = useCallback(async () => {\n    if (!hasMore) {\n      return; // No more transactions to load\n    }\n\n    setIsLoading(true);\n    const newTransactions = await paginatedTransactionsUtils.fetchMore();\n\n    if (newTransactions) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...newTransactions]);\n    }\n\n    setIsLoading(false);\n  }, [hasMore, paginatedTransactionsUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          setSelectedEmployee(newValue);\n\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), selectedEmployee && selectedEmployee.id === EMPTY_EMPLOYEE.id && transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || !hasMore,\n          onClick: loadMoreTransactions,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HPXY2226STZXfyzc/QRhAWimrt4=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","hasMore","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","allTransactions","setAllTransactions","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loadMoreTransactions","newTransactions","fetchMore","prevTransactions","loading","item","value","id","label","firstName","lastName","newValue","length"],"sources":["C:/Users/Nebbor/OneDrive/桌面/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, hasMore, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee>(EMPTY_EMPLOYEE);\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]);\n\n  const transactions = useMemo(\n    () => allTransactions,\n    [allTransactions]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n\n    if (paginatedTransactions?.data) {\n      setAllTransactions(paginatedTransactions.data);\n    }\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n\n      if (transactionsByEmployee) {\n        setAllTransactions(transactionsByEmployee);\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]\n  );\n\n  const loadMoreTransactions = useCallback(async () => {\n    if (!hasMore) {\n      return; // No more transactions to load\n    }\n\n    setIsLoading(true);\n    const newTransactions = await paginatedTransactionsUtils.fetchMore();\n\n    if (newTransactions) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...newTransactions]);\n    }\n\n    setIsLoading(false);\n  }, [hasMore, paginatedTransactionsUtils]);\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n\n            setSelectedEmployee(newValue);\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {selectedEmployee && selectedEmployee.id === EMPTY_EMPLOYEE.id && transactions.length > 0 && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || !hasMore}\n              onClick={loadMoreTransactions}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}