{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      setHasMore(response.nextPage !== null);\n      return {\n        data: response.data,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const fetchMore = useCallback(async () => {\n    if (!hasMore) return;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) || 0\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      setHasMore(response.nextPage !== null);\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, hasMore, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setHasMore(true);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    fetchMore,\n    invalidateData,\n    hasMore\n  };\n}\n\n_s(usePaginatedTransactions, \"0q0tBrvnF6Q8OCntCxT/jPSs+YE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","hasMore","setHasMore","fetchAll","response","page","nextPage","previousResponse","data","fetchMore","invalidateData"],"sources":["C:/Users/Nebbor/OneDrive/桌面/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n  const [hasMore, setHasMore] = useState(true); \n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      setHasMore(response.nextPage !== null);\n\n      return { data: response.data, nextPage: response.nextPage };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const fetchMore = useCallback(async () => {\n    if (!hasMore) return;\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions?.nextPage || 0,\n      }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      setHasMore(response.nextPage !== null);\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, hasMore, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setHasMore(true); \n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, fetchMore, invalidateData, hasMore };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EAEA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,MAAMW,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACO;IADnE,CAFmC,CAArC;IAOAN,wBAAwB,CAAEO,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAEDF,UAAU,CAACE,QAAQ,CAACE,QAAT,KAAsB,IAAvB,CAAV;MAEA,OAAO;QAAEE,IAAI,EAAEJ,QAAQ,CAACI,IAAjB;QAAuBF,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAP;IACD,CARuB,CAAxB;EASD,CAjB2B,EAiBzB,CAACT,cAAD,EAAiBE,qBAAjB,CAjByB,CAA5B;EAmBA,MAAMU,SAAS,GAAGhB,WAAW,CAAC,YAAY;IACxC,IAAI,CAACQ,OAAL,EAAc;IAEd,MAAMG,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAE,CAAAN,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEO,QAAvB,KAAmC;IAD3C,CAFmC,CAArC;IAOAN,wBAAwB,CAAEO,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAEDF,UAAU,CAACE,QAAQ,CAACE,QAAT,KAAsB,IAAvB,CAAV;MAEA,OAAO;QACLE,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAXuB,CAAxB;EAYD,CAtB4B,EAsB1B,CAACT,cAAD,EAAiBI,OAAjB,EAA0BF,qBAA1B,CAtB0B,CAA7B;EAwBA,MAAMW,cAAc,GAAGjB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;IACAE,UAAU,CAAC,IAAD,CAAV;EACD,CAHiC,EAG/B,EAH+B,CAAlC;EAKA,OAAO;IAAEM,IAAI,EAAET,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDM,SAAlD;IAA6DC,cAA7D;IAA6ET;EAA7E,CAAP;AACD;;GAtDeL,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}